/*
 * Copyright (C) 2016 Maxime Schmitt
 *
 * ACR is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 *
 * \file acr_runtime_build.h
 * \brief Wrapper for compiling an in-memory C program
 *
 * \defgroup runtime_generation
 *
 * @{
 *
 */

#ifndef __ACR_RUNTIME_BUILD_H
#define __ACR_RUNTIME_BUILD_H

#include <stdlib.h>
#include "acr/acr_runtime_data.h"

#if @ACR_TCC@ // Build option ACR_TCC

/**
 * \brief If build with TCC support, definr TCC_PRESENT
 */
#define TCC_PRESENT
#include <libtcc.h>

/**
 * \brief Compile a program directly to memory
 * \param[in] string_to_compile The C program inside a string.
 * \return The compiler state.
 */
TCCState* acr_compile_with_tcc(
    const char *string_to_compile);

#endif

/**
 * \brief Compile a C program to a file
 * \param[in] requested_filename A string storing the absolute path to a file.
 * If NULL, a file will be created in /tmp.
 * \param[in] string_to_compile The C program inside a string.
 * \param[in] num_options The number of compiler options.
 * \param[in] options The compiler options.
 * \return The name of the created file.
 * \pre options must have been prepared with ::acr_append_necessary_compile_flags
 */
char* acr_compile_with_system_compiler(
    char *requested_filename,
    const char *string_to_compile,
    size_t num_options,
    char** options);

/**
 * \brief Prepare the compiler options for compilation.
 * \param[in,out] num_options At call must contain the current number of
 * options and at exit will contain the new number of options.
 * \param[in,out] options A pointer where additional options will be append.
 */
void acr_append_necessary_compile_flags(
    size_t *num_options,
    char ***options);

/**
 * \brief Compile and assign the values
 * \param[in,out] static_data The static data structure
 * \param[in] library_code The C code to compile
 */
void acr_code_generation_compile_and_get_functions(
    struct acr_runtime_data_static *static_data,
    const char *library_code);

#endif // __ACR_RUNTIME_BUILD_H

/**
 *
 * @}
 *
 */
